from math import factorial
from math import pow
from math import exp
from math import sqrt
import numpy as np
from numpy import random
import matplotlib.pyplot as plt
from matplotlib import ticker

a = 5.00
b = 9.26
m = 1+int(np.log2(200))
step = (b-a)/m
print("a =", a, "b =", b)
print("Число интервалов:", m)

#-------------------Выборка-------------------
x = [8.50307, 7.71405, 7.39643, 5.14222, 5.63608, 6.84090, 8.50797, 7.75591, 6.63549, 6.24059,
     8.29458, 5.62943, 6.53605, 6.55171, 6.66666, 5.26738, 8.00951, 7.28739, 8.92448, 6.34473,
     5.57197, 5.87143, 7.21937, 7.12808, 6.01911, 7.83236, 6.57207, 7.99324, 7.18222, 8.06711,
     5.00341, 5.33039, 7.08403, 7.13731, 8.41949, 8.43496, 7.05462, 8.19884, 8.06003, 5.81891,
     6.73641, 8.76011, 7.84814, 6.74405, 8.51654, 6.69972, 7.38635, 6.92415, 9.17032, 8.07683,
     7.78873, 7.67001, 6.48236, 7.43508, 7.47621, 5.21539, 5.19713, 8.00389, 8.55377, 6.44430,
     5.51093, 8.24295, 5.64385, 5.69757, 7.48372, 8.60417, 5.85895, 6.41499, 6.68209, 6.25302,
     5.74463, 5.52506, 7.72916, 7.57673, 6.16312, 7.36499, 7.88120, 5.45601, 7.84846, 8.00124,
     8.19091, 7.44873, 5.84747, 5.39377, 6.18000, 8.32483, 5.66835, 6.90752, 8.07441, 6.00477,
     7.26774, 8.18122, 7.93443, 8.27905, 6.69787, 8.38346, 7.64636, 7.90800, 8.45282, 6.40790,
     7.72948, 8.35123, 5.63353, 9.08879, 9.17590, 7.32771, 5.85679, 9.17257, 8.09192, 6.26705,
     8.71947, 5.08084, 5.69963, 8.11535, 9.02091, 6.70530, 7.32367, 7.79458, 7.06488, 8.87127,
     7.48168, 8.26595, 6.49747, 9.00511, 5.15066, 9.05499, 8.20346, 7.39846, 6.45501, 5.85036,
     8.19370, 5.89750, 7.15470, 8.06036, 5.20809, 7.46939, 7.59238, 9.09125, 6.03547, 6.97587,
     6.56026, 8.74133, 6.46163, 9.06046, 8.80133, 7.89389, 7.04022, 6.30758, 5.89941, 8.08198,
     6.09133, 9.13064, 6.33342, 7.21279, 5.67276, 8.77396, 6.50139, 5.79861, 6.80504, 7.80027,
     7.90628, 8.97214, 6.61643, 5.99775, 6.51572, 8.26105, 9.01296, 6.55691, 8.71515, 5.67197,
     5.38838, 6.02459, 6.73223, 8.41238, 6.65345, 5.02839, 5.14842, 6.70840, 9.15086, 7.66702,
     7.29442, 6.30794, 9.01599, 8.16085, 7.65037, 6.27550, 8.93831, 8.35999, 8.61911, 5.98645,
     7.87328, 5.00061, 6.73152, 8.42582, 6.22581, 5.14707, 5.84137, 7.02670, 7.32681, 8.901556]
print("Bыборка:")
print(x)

#-------------------Упорядоченная выборка-------------------
xs = np.sort(x)
print("Упорядоченная выборка")
print(xs)

arr = [0]*9
for k in range(m+1):
    arr[k] = np.round(a + k*step, 5)
print (arr)
#-------------------n_i-------------------
n_i = [0]*m
for j in range(200):
    if (arr[0] <= x[j] <= arr[1]):
        n_i[0] += 1
for k in range(1, m):
    for j in range(200):
        if (arr[k] < x[j] <= arr[k+1]):
            n_i[k] += 1

#-------------------w_i-------------------
w_i = [0]*m
for k in range(m):
    w_i[k] = round(n_i[k]/200, 5)

#-------------------x_i*-------------------
x_i = [0]*m
for k in range(m):
    x_i[k] = np.round((arr[k]+arr[k+1])/2, 5)

#-------------------Таблица 4.1-------------------
print("Таблица 4.1")
for k in range(m):
    print ("Интервал[", arr[k], ",", arr[k+1], "]:", "x _", k, "* =", x_i[k], "n_k =", n_i[k], "w_k =", w_i[k])
print ("sum(n_k) =", sum(n_i), "sum(w_k) =", sum(w_i))

#-------------------p*_k-------------------
p = 1/m

#-------------------|w_k-p*_k|-------------------
razn = [0]*m
for k in range(m):
    razn[k] = np.round(abs(w_i[k]-p), 5)

#-------------------N|w_k-p*_k|^2/p*_k=-------------------
hi2 = [0]*m
for k in range(m):
    hi2[k] = np.round(200*razn[k]*razn[k]/p, 5)
hi2kr = 14.1

#-------------------Таблица 4.2-------------------
print("Таблица 4.2")
for k in range(m):
    print("Интервал[", arr[k], ",", arr[k + 1], "]:", "w_k=", w_i[k], "p*_k =", p, "|w_k-p*_k|=", razn[k],
          "N|w_k-p*_k|^2/p*_k=", hi2[k])
print("sum(w_k) =", sum(n_i), "sum(p*_k) =", p*8, "max|w_k-p*_k|=", max(razn), "sum(N|w_k-p*_k|^2/p*_k)=", np.round(sum(hi2)))

#-------------------Проверка гипотезы-------------------
if np.round(sum(hi2)) <= hi2kr:
    print(f"{np.round(sum(hi2))} <= {hi2kr} Гипотеза НЕ ПРОТИВОРЕЧИТ экспериментальным данным")
else:
    print(f"{np.round(sum(hi2))} > {hi2kr} Гипотеза ПРОТИВОРЕЧИТ экспериментальным данным")

#-------------------Графики-------------------
fig, ox = plt.subplots()
for k in range(m):
    h = round(w_i[k] / step, 5)
    ox.plot([arr[k], arr[k]], [0, h], 'k')
    ox.plot([arr[k], arr[k+1]], [h, h], 'k')
    ox.plot([arr[k+1], arr[k+1]], [h, 0], 'k')
ox.plot([a, b], [1/abs(b-a), 1/abs(b-a)], 'r', linewidth=2)
ox.yaxis.set_major_locator(ticker.MultipleLocator(0.1))
ox.xaxis.set_major_locator(ticker.MultipleLocator(0.5))
plt.title("Гистограмма относительных частот")
plt.grid()
plt.show()


#-------------------Задание 3.5-------------------

#-------------------График функции эмпирического распределения-------------------
fig, sec = plt.subplots()
sec.xaxis.set_major_locator(ticker.MultipleLocator(1))
sec.yaxis.set_major_locator(ticker.MultipleLocator(0.05))
for k in range(xs.size - 1):
    sec.plot([xs[k], xs[k+1]], [(k+1)/200, (k+1)/200], 'b', linewidth=1) #выборочная
sec.plot(xs, (xs-a)/(b-a), 'r', linewidth=1) #
plt.title("Функция эмпирического распределения")
plt.grid(True)
plt.show()

#-------------------D_N-------------------
DN = 0
x_ = 0
j = 0 #x*
for k in range(xs.size):
    buf =max(abs((k+1)/200 - (xs[k]-a)/(b-a)), abs(k/200 - (xs[k]-a)/(b-a)))
    if (buf > DN):
        DN = buf
        x_ = xs[k]
        j = k+1

#-------------------Таблиза 5.1-------------------

print("a=", a, "b=", b, "N=", 200, "D_N=", np.round(DN, 5), "DNsqrt(N)=", np.round(DN*np.sqrt(200), 5),
      "x*0=", x_, "F(x*)=", np.round((x_ - a) / (b - a), 5), "FN(x*)=", np.round(((j) / 200), 5), "FN(x* - 0)=",
      np.round((j - 1) / 200, 5))